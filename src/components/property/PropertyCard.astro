---
import type { House, Locale } from '../../types';
import { getLangFromUrl, useTranslations, formatPrice } from '../../i18n/utils';
import StatusBadge from './StatusBadge.astro';

export interface Props {
  house: House;
  eager?: boolean;
}

const { house, eager = false } = Astro.props;
const lang = getLangFromUrl(Astro.url) as Locale;
const t = useTranslations(lang);

const propertyUrl = lang === 'pl' ? `/domy/${house.id}` : `/${lang}/houses/${house.id}`;

// Use placeholder image if no images available
const mainImage = house.images?.[0] || '/images/houses/placeholder.jpg';
---

<article class="property-card group bg-white rounded-soft shadow-soft overflow-hidden hover:shadow-warm transition-all duration-300">
  <a href={propertyUrl} class="block">
    <!-- Image Container -->
    <div class="relative aspect-property overflow-hidden bg-warm-gray-100">
      <img 
        src={mainImage}
        alt={house.model}
        loading={eager ? 'eager' : 'lazy'}
        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
      />
      
      <!-- Status Badge -->
      <div class="absolute top-4 left-4">
        <StatusBadge status={house.status} />
      </div>
      
      <!-- Price Badge -->
      {house.status !== 'sold' && (
        <div class="absolute bottom-4 right-4 bg-white/95 backdrop-blur-sm rounded-soft px-3 py-2">
          <p class="text-xs text-warm-gray-600 mb-0.5">{t('property.priceFrom')}</p>
          <p class="text-lg font-semibold text-warm-gray-900">
            {formatPrice(house.price, lang)}
          </p>
        </div>
      )}
    </div>
    
    <!-- Content -->
    <div class="p-5">
      <!-- Title & Model -->
      <h3 class="font-serif text-xl font-semibold text-warm-gray-900 mb-2">
        {house.model}
      </h3>
      
      <!-- Short Description -->
      {house.shortDescription && (
        <p class="text-sm text-warm-gray-600 mb-4 line-clamp-2">
          {typeof house.shortDescription === 'object' ? house.shortDescription[lang] : house.shortDescription}
        </p>
      )}
      
      <!-- Property Details Grid -->
      <div class="grid grid-cols-2 gap-3 mb-4">
        <!-- Area -->
        <div class="flex items-center space-x-2">
          <svg class="w-4 h-4 text-birch-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
          </svg>
          <span class="text-sm text-warm-gray-700">
            <span class="font-medium">{house.area}</span> {t('common.squareMeters')}
          </span>
        </div>
        
        <!-- Plot Area -->
        <div class="flex items-center space-x-2">
          <svg class="w-4 h-4 text-birch-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"/>
          </svg>
          <span class="text-sm text-warm-gray-700">
            <span class="font-medium">{house.plotArea}</span> {t('common.squareMeters')}
          </span>
        </div>
        
        <!-- Rooms -->
        <div class="flex items-center space-x-2">
          <svg class="w-4 h-4 text-birch-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"/>
          </svg>
          <span class="text-sm text-warm-gray-700">
            <span class="font-medium">{house.rooms}</span> {t('property.rooms')}
          </span>
        </div>
        
        <!-- Garage -->
        <div class="flex items-center space-x-2">
          <svg class="w-4 h-4 text-birch-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"/>
          </svg>
          <span class="text-sm text-warm-gray-700">
            {t('property.garage')}: <span class="font-medium">{house.garage ? t('common.yes') : t('common.no')}</span>
          </span>
        </div>
      </div>
      
      <!-- Features Pills -->
      {house.features && (
        <div class="flex flex-wrap gap-1.5 mb-4">
          {(Array.isArray(house.features[lang]) ? house.features[lang] : []).slice(0, 3).map((feature: string) => (
            <span class="inline-flex items-center px-2 py-1 text-xs font-medium text-birch-700 bg-birch-50 rounded-full">
              {feature}
            </span>
          ))}
          {(Array.isArray(house.features[lang]) ? house.features[lang] : []).length > 3 && (
            <span class="inline-flex items-center px-2 py-1 text-xs font-medium text-warm-gray-600 bg-warm-gray-100 rounded-full">
              +{(Array.isArray(house.features[lang]) ? house.features[lang] : []).length - 3}
            </span>
          )}
        </div>
      )}
      
      <!-- CTA Button -->
      <button class="w-full btn-primary justify-center text-sm group-hover:bg-birch-600">
        {t('property.viewDetails')}
        <svg class="w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </button>
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
